#include <stdio.h> 
#include <stdlib.h>
#include <time.h>
#define N 9
 
void lerMatriz(unsigned char matriz[][N]){
    int i, j;

    for(i = 0; i < N; i++){
        for(j = 0; j < N; j++){
            scanf("%hhu", &matriz[i][j]);
        }
    }
} 

void imprimirMatriz(unsigned char matriz[][N]){
    int i, j;

    printf("\n\n -------------------------------------\n");
    for(i = 0; i < N; i++){
        for(j = 0; j < N; j++){
            if(j == 0){
                printf(" | ");
            }
            if(matriz[i][j] == 0){
                printf(" _ ");
            } 
            else{
                printf(" %hhu ", matriz[i][j]);
            }
            if((j + 1) % 3 == 0){
                printf(" | ");
            }
        } 
        printf("\n");
        if((i + 1) % 3 == 0){
            printf(" -------------------------------------\n");
        }
    }
}

void imprimirMatriz2(unsigned char matriz[][N]){
    int i, j;

    printf("\n\n -------------------------------------\n");
    for(i = 0; i < N; i++){
        for(j = 0; j < N; j++){
            if(j == 0){
                printf(" | ");
            }
            if(matriz[i][j] == 0){
                printf(" _ ");
            } 
            else{
                if(matriz[i][j] > 9 && matriz[i][j] < 19){
                printf(" %hhu ", (matriz[i][j] - 9));
                } 
                else{
                    printf(" %hhu ", matriz[i][j]);
                }
            }
            if((j + 1) % 3 == 0){
                printf(" | ");
            }
        } 
        printf("\n");
        if((i + 1) % 3 == 0){
            printf(" -------------------------------------\n");
        }
    }
}

void eliminarCelulas(unsigned char matriz[][N], unsigned char numCelulasEliminadas, unsigned seed){
    int i, acum; 
    srand(seed);
    for(i = 0; i < numCelulasEliminadas; i++){
        matriz[rand()%10][rand()%10] = 0;
    }
} 

char jogadaInvalida(unsigned char matriz[][N], unsigned char x, unsigned char y){ 
    int i, j;
    int flag; 
    flag = 0;

    if(x < 9 && y < 9){
        if(matriz[x][y] == 0){
            flag = 1;
        }
        else{
            flag = 0;
        }
    } 
    else{
        flag = 0;
    }
    return flag;
    //retorna 1 se nenhuma regra foi quebrada na ultima jogada do usuario
}

char preencherCelula(unsigned char matriz[][N], unsigned char x, unsigned char y, unsigned char valor){
    int i, j, flag;
    char novoValor;
    unsigned char valido; 
    flag = 0;  
    
    valido = jogadaInvalida(matriz, x, y);
    if(valor > 0 && valor < 10){
        if(valido == 1) {
            matriz[x][y] = (valor + 9);
            flag = 1;
        }
        else{
            flag = 0;
        } 
    }
    return flag;
    //se for possível preencher na coordenada indicada retorna 1
}

char verificarLinha(unsigned char matriz[][N], unsigned char x, unsigned char y){
   int j, acum, valor, flag; 
   acum = 0;
   valor = (matriz[x][y] - 9);
   for(j = 0; j < N; j++){
    if(matriz[x][j] == valor){
        acum++;
    } 
   }
   if(acum > 0){
    flag = 0; //se repete
   } 
   else{
    flag = 1;
   }
   return flag;
    //retorna 1 se o numero não se repete na linha
}

char verificarColuna(unsigned char matriz[][N], unsigned char x, unsigned char y){
    int i, acum, valor, flag; 
   acum = 0;
   valor = (matriz[x][y] - 9);
   for(i = 0; i < N; i++){
    if(matriz[i][y] == valor){
       acum++;
    } 
   }
   if(acum > 0){
    flag = 0; //se repete
   } 
   else{
    flag = 1;
   }
    return flag;
    //retorna 1 caso o numero nao se repita na coluna
}

char verificaBloco(unsigned char matriz[][N], unsigned char x, unsigned char y){
    int i, j, blocoL, blocoC, acum, valor, flag;
    blocoL = x - x % 3;
    blocoC = y - y % 3; 
    acum = 0;
    valor = (matriz[x][y] - 9);
    for(i = blocoL; i < blocoL + 3; i++){
        for(j = blocoC; j < blocoC + 3; j++){
            if(matriz[i][j] == valor){
                acum++;
            }
        }
    } 
    if(acum > 0){
        flag = 0; //repete
    } 
    else{
        flag = 1; //nao repete
    }
    return flag;
    //retorna 1 se o numero nao se repetir dentro do bloco (mat3x3)
}

char ganhouJogo(unsigned char matriz[][N]){
   char linha, coluna, bloco, acum, flag;  
    int i, j;
    acum = 0;
    for(i = 0; i < N; i++){
        for(j = 0; j < N;j++){
            if(matriz[i][j] > 9 && matriz[i][j] < 19){ //verifica apenas os que foram colocados pelo usuario
                linha = verificarLinha(matriz, i, j);                                         
                coluna = verificarColuna(matriz, i, j);
                bloco = verificaBloco(matriz, i, j);
                if(linha == 0 || coluna == 0 || bloco == 0){
                     acum++;
                } 
            }
        }
    }                                                
    
    if(acum > 0){
        flag = 0;
    } 
    else{
        flag = 1;
    } 
    return flag;
   
    //retorna 1 se a matriz foi preenchida corretamente
}
int main(void){
    unsigned char mat[N][N]; 

    printf("Insira o sudoku gabarito\n");
    lerMatriz(mat); 
    int seed, quant, acum; 
    printf("Insira a seed e a quantidade de celulas a serem eliminadas:\n");
    scanf("%d %d", &seed, &quant);
    acum = quant;
    eliminarCelulas(mat, quant, seed);
    imprimirMatriz(mat);
    int linha, coluna, valor, i;
    while(acum > 0){
        printf("Insira o numero da linha e da coluna e o valor que deseja inserir\n");
        scanf("%d %d %d", &linha, &coluna, &valor);
       if(preencherCelula(mat, linha, coluna, valor) == 1){
        acum--;
        imprimirMatriz2(mat);
       }
       else{
        printf("jogada invalida\n");
       }
    }
    if(ganhouJogo(mat) == 1){
        printf("Voce conseguiu");
    }
    else{
        printf("Voce nao conseguiu");
    }    
    return 0;
}
